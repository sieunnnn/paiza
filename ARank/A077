import java.util.*;
import java.io.*;

public class A077 {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;
    static int N;
    static int R;
    static int[][] graph;
    static int[] parent;
    static int answer = 0;

    public static void main(String[] args) throws IOException {
        st = new StringTokenizer(br.readLine());
        N = Integer.parseInt(st.nextToken());
        R = Integer.parseInt(st.nextToken());
        graph = new int[N][2];
        parent = new int[N];

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            int y = Integer.parseInt(st.nextToken());
            int x = Integer.parseInt(st.nextToken());
            graph[i][0] = y;
            graph[i][1] = x;
            parent[i] = i;
        }

        solve();
        countIslands();
        System.out.println(answer);
    }

    public static void solve() {
        for (int i = 0; i < N; i++) {
            for (int j = i + 1; j < N; j++) {
                int y1 = graph[i][0];
                int x1 = graph[i][1];
                int y2 = graph[j][0];
                int x2 = graph[j][1];

                if (calculateDistance(y1, x1, y2, x2)) union(i, j);
            }
        }
    }

    public static boolean calculateDistance(int y1, int x1, int y2, int x2) {
        double temp1 = Math.pow((y1 - y2), 2);
        double temp2 = Math.pow((x1 - x2), 2);
        double sum = temp1 + temp2;
        double root = Math.sqrt(sum);

        return root <= 2 * R;
    }

    public static int find(int x) {
        if (parent[x] == x) return x;
        return parent[x] = find(parent[x]);
    }

    public static void union(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX != rootY) {
            parent[rootY] = rootX;
        }
    }

    public static void countIslands() {
        Set<Integer> uniqueParents = new HashSet<>();
        for (int i = 0; i < N; i++) uniqueParents.add(find(i));
        answer = uniqueParents.size();
    }
}
