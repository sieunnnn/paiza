import java.io.*;
import java.util.*;

public class A082 {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;

    static Queue<int[]> queue = new LinkedList<>();
    static int[][] graph;
    static boolean[][] visited;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};

    static int H;
    static int W;
    static int answer = 0;

    public static void main(String[] args) throws IOException {
        st = new StringTokenizer(br.readLine());
        H = Integer.parseInt(st.nextToken());
        W = Integer.parseInt(st.nextToken());
        graph = new int[H][W];

        for (int i = 0; i < H; i++) {
            String[] temp = br.readLine().split("");
            for (int j = 0; j < temp.length; j++) {
                if (temp[j].equals("#")) {
                    graph[i][j] = 1;
                } else {
                    graph[i][j] = 0;
                }
            }
        }

        check();
        System.out.println(answer);
    }

    public static void check() {
        for (int i = 0; i < H; i++) {
            for (int j = 0; j < W; j++) {
                if (graph[i][j] == 1) {
                    graph[i][j] = 0;
                    visited = new boolean[H][W];
                    int result = 0;

                    for (int y = 0; y < H; y++) {
                        for (int x = 0; x < W; x++) {
                            if (graph[y][x] == 1 && !visited[y][x]) {
                                bfs(y, x);
                                result++;
                            }
                        }
                    }

                    if (result == 1) answer++;
                    graph[i][j] = 1;

                } else answer++;
            }
        }
    }

    public static void bfs(int y, int x) {
        queue.add(new int[] { y, x });
        visited[y][x] = true;

        while (!queue.isEmpty()) {
            int[] current = queue.poll();

            for (int i = 0; i < 4; i++) {
                int ny = current[0] + dy[i];
                int nx = current[1] + dx[i];

                if (ny >= 0 && ny < H && nx >= 0 && nx < W && !visited[ny][nx] && graph[ny][nx] == 1) {
                    visited[ny][nx] = true;
                    queue.add(new int[] { ny, nx });
                }
            }
        }
    }
}
