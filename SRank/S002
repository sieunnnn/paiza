import java.io.*;
import java.util.*;

public class S002 {
    static BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    static StringTokenizer st;
    static Queue<int[]> queue = new LinkedList<>();

    static int M;
    static int N;
    static int min = Integer.MAX_VALUE;
    static boolean flag = false;
    static int startY;
    static int startX;

    static final int START = 2;
    static final int GOAL = 3;
    static final int ROAD = 0;
    static final int WALL = 1;
    static final String FAIL = "Fail";

    static int[][] graph;
    static boolean[][] visited;
    static int[] dx = {-1, 1, 0, 0};
    static int[] dy = {0, 0, -1, 1};

    public static void main(String[] args) throws IOException {
        st = new StringTokenizer(br.readLine());
        M = Integer.parseInt(st.nextToken());
        N = Integer.parseInt(st.nextToken());
        graph = new int[N][M];
        visited = new boolean[N][M];

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());

            for (int j = 0; j < M; j++) {
                String temp = st.nextToken();

                if (temp.equals("0")) graph[i][j] = ROAD;
                else if (temp.equals("1")) graph[i][j] = WALL;
                else if (temp.equals("s")) {
                    startY = i;
                    startX = j;
                    graph[i][j] = START;
                }
                else if (temp.equals("g")) graph[i][j] = GOAL;
            }
        }

        solve(startY, startX);

        if (!flag) System.out.println(FAIL);
        else System.out.println(min);
    }

    public static void solve(int y, int x) {
        visited[y][x] = true;
        queue.add(new int[]{y, x, 0});

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int currY = current[0];
            int currX = current[1];
            int currLength = current[2];

            for (int i = 0; i < 4; i++) {
                int ny = currY + dy[i];
                int nx = currX + dx[i];

                if (ny >= 0 && ny < N && nx >= 0 && nx < M && !visited[ny][nx]) {
                    if (graph[ny][nx] == GOAL) {
                        min = Math.min(min, currLength + 1);
                        flag = true;
                        return;
                    }

                    if (graph[ny][nx] == ROAD) {
                        visited[ny][nx] = true;
                        queue.add(new int[]{ny, nx, currLength + 1});
                    }
                }
            }
        }
    }
}
